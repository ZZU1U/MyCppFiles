#include <bits/stdc++.h>

#define all(x) x.begin(), x.end()
#define ll long long
//#define DEBUG

using namespace std;

const ll p = 27;
const ll q = 1000000009;

struct Hash {
    ll value;
};

ostream& operator << (ostream &os, const Hash& a) {
  return os << a.value % q;
}

Hash operator+(const Hash& a, const Hash& b) {
  ll res = (a.value + b.value) % q;
  return {res};
}

Hash operator+(const Hash& a, const ll& b) {
  ll res = (a.value + b) % q;
  return {res};
}

Hash operator-(const Hash& a, const Hash& b) {
  ll res = (a.value - b.value) % q;
  if (res < 0) {
    res += q;
  }
  return {res};
}

Hash operator-(const Hash& a, const ll& b) {
  ll res = (a.value - b) % q;
  return {res};
}

Hash operator*(const Hash& a, const Hash& b) {
  return {a.value * b.value % q};
}

Hash operator*(const Hash& a, const ll& b) {
  return {static_cast<ll>((long long)a.value * b % q)};
}

bool operator==(const Hash& a, const Hash& b) {
  return a.value == b.value;
}

Hash ctoh(char chr) {
  return Hash{(chr - 'A' + 1) % q};
}

void solveF() {
  string glob;
  getline(cin, glob);

  vector<ll> ps = {1};
  vector<Hash> hashes = {{0}};

  for (ll i = 0; i < glob.size(); i++) {
    hashes.push_back(hashes[i] * p + ctoh(glob.at(i)));
  }

  for (ll i = 0; i < glob.size(); i++) {
    ps.push_back(ps.back() * p % q);
  }
  int n;
  cin >> n;
  for (ll i = 0; i < n; i++) {
    int l1, r1, l2, r2;
    cin >> l1 >> r1 >> l2 >> r2;
    l1--;
    l2--;
    int h1 = (hashes[r1] - hashes[l1] * ps[r1-l1]).value;
    int h2 = (hashes[r2] - hashes[l2] * ps[r2-l2]).value;
    if (h1 > h2) {
      cout << '>';
    } else if (h1 < h2) {
      cout << '<';
    } else {
      cout << '=';
    }
    cout << '\n';
  }
}

void solveG() {
  string glob;
  getline(cin, glob);

  vector<ll> ps = {1};
  vector<Hash> hashes = {{0}};

  for (ll i = 0; i < glob.size(); i++) {
    hashes.push_back(hashes[i] * p + ctoh(glob.at(i)));
  }

  for (ll i = 0; i < glob.size(); i++) {
    ps.push_back(ps.back() * p % q);
  }
  int ans = glob.size();
  for (int i = 1; i < glob.size(); i++) {
    while (glob.size() % i) {
      i++;
    }
    auto norm = hashes[i];
    bool is_ok = true;
    for (int j = 0; j < glob.size() - i; j+=i) {
      if (!(hashes[j+i] - hashes[j] * ps[i] == norm)) {
        is_ok = false;
        break;
      }
    }
    if (is_ok) {
      ans = i;
      break;
    }
  }
  cout << glob.size() / ans;
}

int main() {
  cout << fixed << setprecision(12);
  ios_base::sync_with_stdio(false);
  cin.tie(nullptr);
  cout.tie(nullptr);

#ifdef DEBUG
  freopen("input.txt", "r", stdin);
  freopen("output.txt", "w", stdout);
#endif

  solveF();
}
